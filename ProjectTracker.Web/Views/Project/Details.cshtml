@model ProjectTracker.Service.DTOs.ProjectDto
@inject IViewLocalizer L
@{
    ViewData["Title"] = L["Title"];
}

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h3><i class="fas fa-info-circle"></i> @Model.Name - @L["Details"]</h3>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-3">@L["ProjectName"]</dt>
                        <dd class="col-sm-9">@Model.Name</dd>

                        <dt class="col-sm-3">@L["Description"]</dt>
                        <dd class="col-sm-9">@Model.Description</dd>

                        <dt class="col-sm-3">@L["StartDate"]</dt>
                        <dd class="col-sm-9">@Model.StartDate.ToString("dd.MM.yyyy")</dd>

                        <dt class="col-sm-3">@L["EndDate"]</dt>
                        <dd class="col-sm-9">@(Model.EndDate?.ToString("dd.MM.yyyy") ?? L["NotSpecified"].Value)</dd>

                        <dt class="col-sm-3">@L["Budget"]</dt>
                        <dd class="col-sm-9">@Model.Budget.ToString("C")</dd>

                        <dt class="col-sm-3">@L["ActualCost"]</dt>
                        <dd class="col-sm-9">@(Model.ActualCost?.ToString("C") ?? L["NoneYet"].Value)</dd>
                    </dl>

                    <div class="mt-4">
                        @if (Model.Documents != null && Model.Documents.Any())
                        {
                            <h5><i class="fas fa-paperclip"></i> @L["Documents", Model.Documents.Count]</h5>
                            <ul class="list-group mb-3">
                                @foreach (var doc in Model.Documents)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <i class="fas fa-file-@GetFileIcon(doc.FileType)"></i> @doc.FileName<br />
                                            <small class="text-muted">@GetFileSize(doc.FileSize)</small>
                                        </div>
                                        <a href="@doc.FilePath" class="btn btn-sm btn-primary" download>
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="text-muted">@L["NoDocuments"]</p>
                        }

                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                            <i class="fas fa-edit"></i> @L["Edit"]
                        </a>
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> @L["BackToList"]
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetFileIcon(string fileType)
    {
        fileType = fileType?.ToLower() ?? string.Empty;
        if (fileType.Contains("pdf")) return "pdf";
        if (fileType.Contains("word") || fileType.Contains("doc")) return "word";
        if (fileType.Contains("excel") || fileType.Contains("xls")) return "excel";
        if (fileType.Contains("image") || fileType.Contains("png") || fileType.Contains("jpg") || fileType.Contains("jpeg")) return "image";
        if (fileType.Contains("zip") || fileType.Contains("rar")) return "archive";
        return "alt";
    }

    string GetFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size = size / 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }
}
