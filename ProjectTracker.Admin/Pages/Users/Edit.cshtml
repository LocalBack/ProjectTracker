@page "{id:int}"
@model ProjectTracker.Admin.Pages.Users.EditModel
@{
    ViewData["Title"] = "Edit User";
}

<h1>Edit User</h1>

<hr />

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">User Details</h4>
            </div>
            <div class="card-body">
                <form method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                    <input type="hidden" asp-for="Input.Id" />
                    
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <input type="text" class="form-control" value="@Model.Username" readonly />
                        <small class="form-text text-muted">Username cannot be changed.</small>
                    </div>
                    
                    <div class="mb-3">
                        <label asp-for="Input.Email" class="form-label"></label>
                        <input asp-for="Input.Email" class="form-control" />
                        <span asp-validation-for="Input.Email" class="text-danger"></span>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Input.FirstName" class="form-label"></label>
                                <input asp-for="Input.FirstName" class="form-control" />
                                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Input.LastName" class="form-label"></label>
                                <input asp-for="Input.LastName" class="form-control" />
                                <span asp-validation-for="Input.LastName" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Input.EmployeeId" class="form-label"></label>
                                <input asp-for="Input.EmployeeId" class="form-control" type="number" />
                                <span asp-validation-for="Input.EmployeeId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Input.PhoneNumber" class="form-label"></label>
                                <input asp-for="Input.PhoneNumber" class="form-control" />
                                <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <h5 class="mt-4 mb-3">Account Settings</h5>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="form-check">
                                    <input asp-for="Input.EmailConfirmed" class="form-check-input" />
                                    <label asp-for="Input.EmailConfirmed" class="form-check-label"></label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="form-check">
                                    <input asp-for="Input.TwoFactorEnabled" class="form-check-input" />
                                    <label asp-for="Input.TwoFactorEnabled" class="form-check-label"></label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input asp-for="Input.IsActive" class="form-check-input" />
                                    <label asp-for="Input.IsActive" class="form-check-label"></label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <input asp-for="Input.IsLocked" class="form-check-input" />
                            <label asp-for="Input.IsLocked" class="form-check-label"></label>
                        </div>
                        @if (Model.Input.LockoutEnd.HasValue && Model.Input.LockoutEnd > DateTimeOffset.Now)
                        {
                            <small class="form-text text-muted">
                                Currently locked until: @Model.Input.LockoutEnd.Value.LocalDateTime.ToString("f")
                            </small>
                        }
                        else
                        {
                            <small class="form-text text-muted">
                                Checking this will lock the account for 30 days.
                            </small>
                        }
                    </div>

                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Save Changes
                        </button>
                        <a asp-page="./Index" class="btn btn-secondary">
                            <i class="fas fa-times"></i> Cancel
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">Quick Actions</h5>
            </div>
            <div class="card-body">
                <form method="post" asp-page-handler="ResetPassword" asp-route-id="@Model.Input.Id" 
                      onsubmit="return confirm('Are you sure you want to reset this user\'s password?');">
                    <button type="submit" class="btn btn-warning btn-block mb-2">
                        <i class="fas fa-key"></i> Reset Password
                    </button>
                </form>
                
                <a asp-page="./ManageRoles" asp-route-id="@Model.Input.Id.ToString()" class="btn btn-info btn-block mb-2">
                    <i class="fas fa-user-tag"></i> Manage Roles
                </a>
                
                <hr />

                <a asp-page="./Details" asp-route-id="@Model.Input.Id.ToString()" class="btn btn-outline-primary btn-block">
                    <i class="fas fa-eye"></i> View Details
                </a>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-header bg-info text-white">
                <h5 class="card-title mb-0">Information</h5>
            </div>
            <div class="card-body">
                <h6>Account Status:</h6>
                <ul class="small mb-3">
                    <li>Email Confirmed: @(Model.Input.EmailConfirmed ? "Yes" : "No")</li>
                    <li>Two-Factor Auth: @(Model.Input.TwoFactorEnabled ? "Enabled" : "Disabled")</li>
                    <li>Account Locked: @(Model.Input.IsLocked ? "Yes" : "No")</li>
                </ul>

                <hr />

                <div class="alert alert-warning mb-0">
                    <i class="fas fa-exclamation-triangle"></i> <strong>Note:</strong>
                    <ul class="mb-0 mt-2 small">
                        <li>Email changes require re-confirmation</li>
                        <li>Locking an account prevents login</li>
                        <li>Password resets generate temporary passwords</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Highlight changed fields
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const inputs = form.querySelectorAll('input:not([type="hidden"]):not([readonly])');

            inputs.forEach(input => {
                const originalValue = input.type === 'checkbox' ? input.checked : input.value;

                input.addEventListener('change', function() {
                    const currentValue = this.type === 'checkbox' ? this.checked : this.value;

                    if (currentValue !== originalValue) {
                        this.classList.add('border-warning');
                    } else {
                        this.classList.remove('border-warning');
                    }
                });
            });
        });

        // Warning for email change
        document.getElementById('Input_Email').addEventListener('change', function() {
            const originalEmail = '@Model.Input.Email';
            if (this.value !== originalEmail) {
                if (!document.getElementById('email-warning')) {
                    const warning = document.createElement('small');
                    warning.id = 'email-warning';
                    warning.className = 'form-text text-warning';
                    warning.textContent = 'Warning: Changing email will require the user to re-confirm their email address.';
                    this.parentNode.appendChild(warning);
                }
            } else {
                const warning = document.getElementById('email-warning');
                if (warning) {
                    warning.remove();
                }
            }
        });

        // Lock account confirmation
        document.getElementById('Input_IsLocked').addEventListener('change', function() {
            if (this.checked) {
                const currentlyLocked = @(Model.Input.IsLocked ? "true" : "false");
                if (!currentlyLocked) {
                    if (!confirm('Are you sure you want to lock this account? The user will not be able to login.')) {
                        this.checked = false;
                    }
                }
            }
        });
    </script>
}